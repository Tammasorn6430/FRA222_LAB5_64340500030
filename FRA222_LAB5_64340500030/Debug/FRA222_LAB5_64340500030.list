
FRA222_LAB5_64340500030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041dc  080041dc  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  080041e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000344  08004528  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004528  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d76  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172a  00000000  00000000  000290ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d3f  00000000  00000000  00040ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e47  00000000  00000000  00049c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfa69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  000cfabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000344 	.word	0x20000344
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004110 	.word	0x08004110

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000348 	.word	0x20000348
 80001dc:	08004110 	.word	0x08004110

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fcf6 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f99c 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fa56 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 fa2c 	bl	8000a00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 fa00 	bl	80009ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTInterruptConfig();
 80005ac:	f000 fb10 	bl	8000bd0 <UARTInterruptConfig>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit_IT(&huart2, mainMenu, strlen(mainMenu));
 80005b0:	4891      	ldr	r0, [pc, #580]	; (80007f8 <main+0x264>)
 80005b2:	f7ff fe15 	bl	80001e0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	498e      	ldr	r1, [pc, #568]	; (80007f8 <main+0x264>)
 80005be:	488f      	ldr	r0, [pc, #572]	; (80007fc <main+0x268>)
 80005c0:	f002 f929 	bl	8002816 <HAL_UART_Transmit_IT>
  while (1)
  {
	  	  button_C = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	488d      	ldr	r0, [pc, #564]	; (8000800 <main+0x26c>)
 80005ca:	f001 fb61 	bl	8001c90 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b8c      	ldr	r3, [pc, #560]	; (8000804 <main+0x270>)
 80005d4:	601a      	str	r2, [r3, #0]
	  	  if (button_L != button_C) {
 80005d6:	4b8c      	ldr	r3, [pc, #560]	; (8000808 <main+0x274>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b8a      	ldr	r3, [pc, #552]	; (8000804 <main+0x270>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d003      	beq.n	80005ea <main+0x56>
	  			flag = 1;
 80005e2:	4b8a      	ldr	r3, [pc, #552]	; (800080c <main+0x278>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	e002      	b.n	80005f0 <main+0x5c>
	  	  } else {
	  			flag = 0;
 80005ea:	4b88      	ldr	r3, [pc, #544]	; (800080c <main+0x278>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
	  	  }
	  	  button_L = button_C;
 80005f0:	4b84      	ldr	r3, [pc, #528]	; (8000804 <main+0x270>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a84      	ldr	r2, [pc, #528]	; (8000808 <main+0x274>)
 80005f6:	6013      	str	r3, [r2, #0]

	  	  LED();
 80005f8:	f000 fa98 	bl	8000b2c <LED>
		  switch (state) {
 80005fc:	4b84      	ldr	r3, [pc, #528]	; (8000810 <main+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	f000 80ea 	beq.w	80007da <main+0x246>
 8000606:	2b03      	cmp	r3, #3
 8000608:	dcdc      	bgt.n	80005c4 <main+0x30>
 800060a:	2b01      	cmp	r3, #1
 800060c:	d002      	beq.n	8000614 <main+0x80>
 800060e:	2b02      	cmp	r3, #2
 8000610:	d040      	beq.n	8000694 <main+0x100>
 8000612:	e14f      	b.n	80008b4 <main+0x320>
			case 1: //init state
				if(typing_F){
 8000614:	4b7f      	ldr	r3, [pc, #508]	; (8000814 <main+0x280>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	f000 8146 	beq.w	80008aa <main+0x316>
					if(RxBuffer[0] == 48){ //0: LED mode
 800061e:	4b7e      	ldr	r3, [pc, #504]	; (8000818 <main+0x284>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b30      	cmp	r3, #48	; 0x30
 8000624:	d110      	bne.n	8000648 <main+0xb4>
						HAL_UART_Transmit_IT(&huart2, LEDModeMenu, strlen(LEDModeMenu));
 8000626:	487d      	ldr	r0, [pc, #500]	; (800081c <main+0x288>)
 8000628:	f7ff fdda 	bl	80001e0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	497a      	ldr	r1, [pc, #488]	; (800081c <main+0x288>)
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x268>)
 8000636:	f002 f8ee 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 800063a:	4b76      	ldr	r3, [pc, #472]	; (8000814 <main+0x280>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
						state = 2;
 8000640:	4b73      	ldr	r3, [pc, #460]	; (8000810 <main+0x27c>)
 8000642:	2202      	movs	r2, #2
 8000644:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
						typing_F = 0;
						state = 1;
					}
				}
				break;
 8000646:	e130      	b.n	80008aa <main+0x316>
					else if(RxBuffer[0] == 49){ //1: Button mode
 8000648:	4b73      	ldr	r3, [pc, #460]	; (8000818 <main+0x284>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b31      	cmp	r3, #49	; 0x31
 800064e:	d110      	bne.n	8000672 <main+0xde>
						HAL_UART_Transmit_IT(&huart2, buttonModeMenu, strlen(buttonModeMenu));
 8000650:	4873      	ldr	r0, [pc, #460]	; (8000820 <main+0x28c>)
 8000652:	f7ff fdc5 	bl	80001e0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4970      	ldr	r1, [pc, #448]	; (8000820 <main+0x28c>)
 800065e:	4867      	ldr	r0, [pc, #412]	; (80007fc <main+0x268>)
 8000660:	f002 f8d9 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 8000664:	4b6b      	ldr	r3, [pc, #428]	; (8000814 <main+0x280>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
						state = 3;
 800066a:	4b69      	ldr	r3, [pc, #420]	; (8000810 <main+0x27c>)
 800066c:	2203      	movs	r2, #3
 800066e:	601a      	str	r2, [r3, #0]
				break;
 8000670:	e11b      	b.n	80008aa <main+0x316>
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <main+0x290>)
 8000674:	f7ff fdb4 	bl	80001e0 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29b      	uxth	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <main+0x290>)
 8000680:	485e      	ldr	r0, [pc, #376]	; (80007fc <main+0x268>)
 8000682:	f002 f8c8 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 8000686:	4b63      	ldr	r3, [pc, #396]	; (8000814 <main+0x280>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
						state = 1;
 800068c:	4b60      	ldr	r3, [pc, #384]	; (8000810 <main+0x27c>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
				break;
 8000692:	e10a      	b.n	80008aa <main+0x316>
			case 2: //LED mode
				if(typing_F){
 8000694:	4b5f      	ldr	r3, [pc, #380]	; (8000814 <main+0x280>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 8108 	beq.w	80008ae <main+0x31a>
					if(RxBuffer[0] == 97){ //a: speed up 1Hz
 800069e:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <main+0x284>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b61      	cmp	r3, #97	; 0x61
 80006a4:	d123      	bne.n	80006ee <main+0x15a>
						hz += 1;
 80006a6:	4b60      	ldr	r3, [pc, #384]	; (8000828 <main+0x294>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a5e      	ldr	r2, [pc, #376]	; (8000828 <main+0x294>)
 80006ae:	6013      	str	r3, [r2, #0]
						if (hz < 0) {hz = 0;}
 80006b0:	4b5d      	ldr	r3, [pc, #372]	; (8000828 <main+0x294>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	da02      	bge.n	80006be <main+0x12a>
 80006b8:	4b5b      	ldr	r3, [pc, #364]	; (8000828 <main+0x294>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
						sprintf((char*)LEDSpeed, "\r\nLED speed : %d\r\n", hz);
 80006be:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <main+0x294>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4959      	ldr	r1, [pc, #356]	; (800082c <main+0x298>)
 80006c6:	485a      	ldr	r0, [pc, #360]	; (8000830 <main+0x29c>)
 80006c8:	f003 f8b4 	bl	8003834 <siprintf>
						HAL_UART_Transmit_IT(&huart2, LEDSpeed, strlen(LEDSpeed));
 80006cc:	4858      	ldr	r0, [pc, #352]	; (8000830 <main+0x29c>)
 80006ce:	f7ff fd87 	bl	80001e0 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	4955      	ldr	r1, [pc, #340]	; (8000830 <main+0x29c>)
 80006da:	4848      	ldr	r0, [pc, #288]	; (80007fc <main+0x268>)
 80006dc:	f002 f89b 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <main+0x280>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
						state = 2;
 80006e6:	4b4a      	ldr	r3, [pc, #296]	; (8000810 <main+0x27c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
						typing_F = 0;
						state = 2;
					}
				}
				break;
 80006ec:	e0df      	b.n	80008ae <main+0x31a>
					else if(RxBuffer[0] == 115){ //s: speed down 1Hz
 80006ee:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <main+0x284>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b73      	cmp	r3, #115	; 0x73
 80006f4:	d123      	bne.n	800073e <main+0x1aa>
						hz -= 1;
 80006f6:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <main+0x294>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <main+0x294>)
 80006fe:	6013      	str	r3, [r2, #0]
						if (hz < 0) {hz = 0;}
 8000700:	4b49      	ldr	r3, [pc, #292]	; (8000828 <main+0x294>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da02      	bge.n	800070e <main+0x17a>
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <main+0x294>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
						sprintf((char*)LEDSpeed, "\r\nLED speed : %d\r\n", hz);
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <main+0x294>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4945      	ldr	r1, [pc, #276]	; (800082c <main+0x298>)
 8000716:	4846      	ldr	r0, [pc, #280]	; (8000830 <main+0x29c>)
 8000718:	f003 f88c 	bl	8003834 <siprintf>
						HAL_UART_Transmit_IT(&huart2, LEDSpeed, strlen(LEDSpeed));
 800071c:	4844      	ldr	r0, [pc, #272]	; (8000830 <main+0x29c>)
 800071e:	f7ff fd5f 	bl	80001e0 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29b      	uxth	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	4941      	ldr	r1, [pc, #260]	; (8000830 <main+0x29c>)
 800072a:	4834      	ldr	r0, [pc, #208]	; (80007fc <main+0x268>)
 800072c:	f002 f873 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <main+0x280>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
						state = 2;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <main+0x27c>)
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
				break;
 800073c:	e0b7      	b.n	80008ae <main+0x31a>
					else if(RxBuffer[0] == 100){ //d : on/off LED
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <main+0x284>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b64      	cmp	r3, #100	; 0x64
 8000744:	d123      	bne.n	800078e <main+0x1fa>
						ledStatus = !ledStatus;
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <main+0x2a0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf0c      	ite	eq
 800074e:	2301      	moveq	r3, #1
 8000750:	2300      	movne	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	4b37      	ldr	r3, [pc, #220]	; (8000834 <main+0x2a0>)
 8000758:	601a      	str	r2, [r3, #0]
						if (ledStatus == 1) {
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <main+0x2a0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d105      	bne.n	800076e <main+0x1da>
							HAL_UART_Transmit_IT(&huart2, "LED on\r\n", strlen("LED on\r\n"));
 8000762:	2208      	movs	r2, #8
 8000764:	4934      	ldr	r1, [pc, #208]	; (8000838 <main+0x2a4>)
 8000766:	4825      	ldr	r0, [pc, #148]	; (80007fc <main+0x268>)
 8000768:	f002 f855 	bl	8002816 <HAL_UART_Transmit_IT>
 800076c:	e008      	b.n	8000780 <main+0x1ec>
						} else if(ledStatus == 0){
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <main+0x2a0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x1ec>
							HAL_UART_Transmit_IT(&huart2, "LED off\r\n", strlen("LED off\r\n"));
 8000776:	2209      	movs	r2, #9
 8000778:	4930      	ldr	r1, [pc, #192]	; (800083c <main+0x2a8>)
 800077a:	4820      	ldr	r0, [pc, #128]	; (80007fc <main+0x268>)
 800077c:	f002 f84b 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <main+0x280>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
						state = 2;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <main+0x27c>)
 8000788:	2202      	movs	r2, #2
 800078a:	601a      	str	r2, [r3, #0]
				break;
 800078c:	e08f      	b.n	80008ae <main+0x31a>
					else if(RxBuffer[0] == 120){ //x: back
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <main+0x284>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b78      	cmp	r3, #120	; 0x78
 8000794:	d110      	bne.n	80007b8 <main+0x224>
						HAL_UART_Transmit_IT(&huart2, mainMenu, strlen(mainMenu));
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <main+0x264>)
 8000798:	f7ff fd22 	bl	80001e0 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29b      	uxth	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	4915      	ldr	r1, [pc, #84]	; (80007f8 <main+0x264>)
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <main+0x268>)
 80007a6:	f002 f836 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <main+0x280>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
						state = 1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <main+0x27c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
				break;
 80007b6:	e07a      	b.n	80008ae <main+0x31a>
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
 80007b8:	481a      	ldr	r0, [pc, #104]	; (8000824 <main+0x290>)
 80007ba:	f7ff fd11 	bl	80001e0 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4917      	ldr	r1, [pc, #92]	; (8000824 <main+0x290>)
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <main+0x268>)
 80007c8:	f002 f825 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <main+0x280>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
						state = 2;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <main+0x27c>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
				break;
 80007d8:	e069      	b.n	80008ae <main+0x31a>
			case 3: //Button mode
				if(flag){
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <main+0x278>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d039      	beq.n	8000856 <main+0x2c2>
					if(button_C == 0){
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <main+0x270>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d12c      	bne.n	8000844 <main+0x2b0>
						HAL_UART_Transmit_IT(&huart2, "pressed\r\n", strlen("pressed\r\n"));
 80007ea:	2209      	movs	r2, #9
 80007ec:	4914      	ldr	r1, [pc, #80]	; (8000840 <main+0x2ac>)
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <main+0x268>)
 80007f0:	f002 f811 	bl	8002816 <HAL_UART_Transmit_IT>
 80007f4:	e02f      	b.n	8000856 <main+0x2c2>
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000360 	.word	0x20000360
 8000800:	40020800 	.word	0x40020800
 8000804:	200002c4 	.word	0x200002c4
 8000808:	200002c0 	.word	0x200002c0
 800080c:	20000494 	.word	0x20000494
 8000810:	200002bc 	.word	0x200002bc
 8000814:	200002c8 	.word	0x200002c8
 8000818:	20000464 	.word	0x20000464
 800081c:	200000c8 	.word	0x200000c8
 8000820:	20000190 	.word	0x20000190
 8000824:	20000258 	.word	0x20000258
 8000828:	200002cc 	.word	0x200002cc
 800082c:	08004128 	.word	0x08004128
 8000830:	20000480 	.word	0x20000480
 8000834:	200002d0 	.word	0x200002d0
 8000838:	0800413c 	.word	0x0800413c
 800083c:	08004148 	.word	0x08004148
 8000840:	08004154 	.word	0x08004154
					}
					else if(button_C == 1){
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <main+0x324>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d104      	bne.n	8000856 <main+0x2c2>
						HAL_UART_Transmit_IT(&huart2, "unpressed\r\n", strlen("unpressed\r\n"));
 800084c:	220b      	movs	r2, #11
 800084e:	491b      	ldr	r1, [pc, #108]	; (80008bc <main+0x328>)
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <main+0x32c>)
 8000852:	f001 ffe0 	bl	8002816 <HAL_UART_Transmit_IT>
					}
				}
				if(typing_F){
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <main+0x330>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d029      	beq.n	80008b2 <main+0x31e>
					if(RxBuffer[0] == 120){ //x: back
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <main+0x334>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b78      	cmp	r3, #120	; 0x78
 8000864:	d110      	bne.n	8000888 <main+0x2f4>
						HAL_UART_Transmit_IT(&huart2, mainMenu, strlen(mainMenu));
 8000866:	4819      	ldr	r0, [pc, #100]	; (80008cc <main+0x338>)
 8000868:	f7ff fcba 	bl	80001e0 <strlen>
 800086c:	4603      	mov	r3, r0
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	4916      	ldr	r1, [pc, #88]	; (80008cc <main+0x338>)
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <main+0x32c>)
 8000876:	f001 ffce 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <main+0x330>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
						state = 1;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <main+0x33c>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
						typing_F = 0;
						state = 3;
					}
				}
				break;
 8000886:	e014      	b.n	80008b2 <main+0x31e>
						HAL_UART_Transmit_IT(&huart2, warning, strlen(warning));
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <main+0x340>)
 800088a:	f7ff fca9 	bl	80001e0 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	490f      	ldr	r1, [pc, #60]	; (80008d4 <main+0x340>)
 8000896:	480a      	ldr	r0, [pc, #40]	; (80008c0 <main+0x32c>)
 8000898:	f001 ffbd 	bl	8002816 <HAL_UART_Transmit_IT>
						typing_F = 0;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <main+0x330>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
						state = 3;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <main+0x33c>)
 80008a4:	2203      	movs	r2, #3
 80008a6:	601a      	str	r2, [r3, #0]
				break;
 80008a8:	e003      	b.n	80008b2 <main+0x31e>
				break;
 80008aa:	bf00      	nop
 80008ac:	e68a      	b.n	80005c4 <main+0x30>
				break;
 80008ae:	bf00      	nop
 80008b0:	e688      	b.n	80005c4 <main+0x30>
				break;
 80008b2:	bf00      	nop
	  	  button_C = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80008b4:	e686      	b.n	80005c4 <main+0x30>
 80008b6:	bf00      	nop
 80008b8:	200002c4 	.word	0x200002c4
 80008bc:	08004160 	.word	0x08004160
 80008c0:	20000360 	.word	0x20000360
 80008c4:	200002c8 	.word	0x200002c8
 80008c8:	20000464 	.word	0x20000464
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200002bc 	.word	0x200002bc
 80008d4:	20000258 	.word	0x20000258

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	; 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2230      	movs	r2, #48	; 0x30
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ff9c 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <SystemClock_Config+0xcc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <SystemClock_Config+0xcc>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <SystemClock_Config+0xd0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xd0>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000948:	2310      	movs	r3, #16
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800094c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000952:	2304      	movs	r3, #4
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000956:	2304      	movs	r3, #4
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f9e2 	bl	8001d28 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800096a:	f000 f96f 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fc44 	bl	8002218 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000996:	f000 f959 	bl	8000c4c <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f001 fe38 	bl	8002658 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f92d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000360 	.word	0x20000360
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2010      	movs	r0, #16
 8000a28:	f000 fbfb 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 fc14 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2011      	movs	r0, #17
 8000a38:	f000 fbf3 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a3c:	2011      	movs	r0, #17
 8000a3e:	f000 fc0c 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a25      	ldr	r2, [pc, #148]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0xd4>)
 8000adc:	f001 f8f0 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_GPIO_Init+0xd8>)
 8000af8:	f000 ff46 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afc:	2320      	movs	r3, #32
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0xd4>)
 8000b14:	f000 ff38 	bl	8001988 <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020800 	.word	0x40020800

08000b2c <LED>:

/* USER CODE BEGIN 4 */
//Blink LED
void LED(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	if (hz != 0) {
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <LED+0x90>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00d      	beq.n	8000b54 <LED+0x28>
		delay = (500/hz);
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <LED+0x90>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <LED+0x94>)
 8000b4e:	edc3 7a00 	vstr	s15, [r3]
 8000b52:	e003      	b.n	8000b5c <LED+0x30>
	}
	else{
		delay = 0;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <LED+0x94>)
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
	}

	if (ledStatus) {
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <LED+0x98>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d020      	beq.n	8000ba6 <LED+0x7a>
		static uint32_t timestamp = 0;

		if(HAL_GetTick() >= timestamp && hz != 0){
 8000b64:	f000 fa76 	bl	8001054 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <LED+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d322      	bcc.n	8000bb8 <LED+0x8c>
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <LED+0x90>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d01e      	beq.n	8000bb8 <LED+0x8c>
			timestamp = HAL_GetTick() + delay;
 8000b7a:	f000 fa6b 	bl	8001054 <HAL_GetTick>
 8000b7e:	ee07 0a90 	vmov	s15, r0
 8000b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <LED+0x94>)
 8000b88:	edd3 7a00 	vldr	s15, [r3]
 8000b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b94:	ee17 2a90 	vmov	r2, s15
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LED+0x9c>)
 8000b9a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <LED+0xa0>)
 8000ba0:	f001 f8a7 	bl	8001cf2 <HAL_GPIO_TogglePin>
		}
	}
	else if(ledStatus == 0){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	}
}
 8000ba4:	e008      	b.n	8000bb8 <LED+0x8c>
	else if(ledStatus == 0){
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LED+0x98>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <LED+0x8c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <LED+0xa0>)
 8000bb4:	f001 f884 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200002cc 	.word	0x200002cc
 8000bc0:	20000498 	.word	0x20000498
 8000bc4:	200002d0 	.word	0x200002d0
 8000bc8:	2000049c 	.word	0x2000049c
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <UARTInterruptConfig>:
//using Interrupt
void UARTInterruptConfig(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	//start UART in Interrupt mode
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4903      	ldr	r1, [pc, #12]	; (8000be4 <UARTInterruptConfig+0x14>)
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <UARTInterruptConfig+0x18>)
 8000bda:	f001 fe61 	bl	80028a0 <HAL_UART_Receive_IT>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000464 	.word	0x20000464
 8000be8:	20000360 	.word	0x20000360

08000bec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_UART_RxCpltCallback+0x4c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d119      	bne.n	8000c30 <HAL_UART_RxCpltCallback+0x44>
		//(for string only) Add string stop symbol \0 to end string
		typing_F = 1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_UART_RxCpltCallback+0x50>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
		RxBuffer[1] = '\0';
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_UART_RxCpltCallback+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	705a      	strb	r2, [r3, #1]
		//return received char
		sprintf((char*)TxBuffer, "\r\nReceived : %s\r\n", RxBuffer);
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_UART_RxCpltCallback+0x54>)
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <HAL_UART_RxCpltCallback+0x58>)
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <HAL_UART_RxCpltCallback+0x5c>)
 8000c0e:	f002 fe11 	bl	8003834 <siprintf>
		HAL_UART_Transmit(&huart2, TxBuffer, strlen((char*)TxBuffer), 10);
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <HAL_UART_RxCpltCallback+0x5c>)
 8000c14:	f7ff fae4 	bl	80001e0 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	490a      	ldr	r1, [pc, #40]	; (8000c48 <HAL_UART_RxCpltCallback+0x5c>)
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_UART_RxCpltCallback+0x4c>)
 8000c22:	f001 fd66 	bl	80026f2 <HAL_UART_Transmit>
		//recall Receive
		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	4905      	ldr	r1, [pc, #20]	; (8000c40 <HAL_UART_RxCpltCallback+0x54>)
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <HAL_UART_RxCpltCallback+0x4c>)
 8000c2c:	f001 fe38 	bl	80028a0 <HAL_UART_Receive_IT>
	}
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000360 	.word	0x20000360
 8000c3c:	200002c8 	.word	0x200002c8
 8000c40:	20000464 	.word	0x20000464
 8000c44:	0800416c 	.word	0x0800416c
 8000c48:	2000046c 	.word	0x2000046c

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fab8 	bl	800120c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <HAL_UART_MspInit+0x150>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	f040 8091 	bne.w	8000dee <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <HAL_UART_MspInit+0x154>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d04:	230c      	movs	r3, #12
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d14:	2307      	movs	r3, #7
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4838      	ldr	r0, [pc, #224]	; (8000e00 <HAL_UART_MspInit+0x158>)
 8000d20:	f000 fe32 	bl	8001988 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d26:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_UART_MspInit+0x160>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d66:	4827      	ldr	r0, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d68:	f000 fa92 	bl	8001290 <HAL_DMA_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d72:	f7ff ff6b 	bl	8000c4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_UART_MspInit+0x168>)
 8000d86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000d92:	2240      	movs	r2, #64	; 0x40
 8000d94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000dc4:	f000 fa64 	bl	8001290 <HAL_DMA_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000dce:	f7ff ff3d 	bl	8000c4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_UART_MspInit+0x164>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2026      	movs	r0, #38	; 0x26
 8000de4:	f000 fa1d 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000de8:	2026      	movs	r0, #38	; 0x26
 8000dea:	f000 fa36 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	200003a4 	.word	0x200003a4
 8000e08:	40026088 	.word	0x40026088
 8000e0c:	20000404 	.word	0x20000404
 8000e10:	400260a0 	.word	0x400260a0

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8e4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Stream5_IRQHandler+0x10>)
 8000e6e:	f000 fb4f 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003a4 	.word	0x200003a4

08000e7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Stream6_IRQHandler+0x10>)
 8000e82:	f000 fb45 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000404 	.word	0x20000404

08000e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USART2_IRQHandler+0x10>)
 8000e96:	f001 fd33 	bl	8002900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000360 	.word	0x20000360

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f002 fc7c 	bl	80037d0 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20020000 	.word	0x20020000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	200004a0 	.word	0x200004a0
 8000f0c:	200004b8 	.word	0x200004b8

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff ffd7 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f002 fc3b 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb15 	bl	8000594 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8000f78:	080041e4 	.word	0x080041e4
  ldr r2, =_sbss
 8000f7c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8000f80:	200004b8 	.word	0x200004b8

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f92b 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fe4c 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f943 	bl	8001276 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f90b 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200002d4 	.word	0x200002d4
 8001024:	200002dc 	.word	0x200002dc
 8001028:	200002d8 	.word	0x200002d8

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002dc 	.word	0x200002dc
 8001050:	200004a4 	.word	0x200004a4

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200004a4 	.word	0x200004a4

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feda 	bl	8001054 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e099      	b.n	80013e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012cc:	e00f      	b.n	80012ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ce:	f7ff fec1 	bl	8001054 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d908      	bls.n	80012ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e078      	b.n	80013e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e8      	bne.n	80012ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_DMA_Init+0x158>)
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	2b04      	cmp	r3, #4
 8001346:	d107      	bne.n	8001358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4313      	orrs	r3, r2
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4313      	orrs	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	2b04      	cmp	r3, #4
 8001380:	d117      	bne.n	80013b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00e      	beq.n	80013b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa7b 	bl	8001890 <DMA_CheckFifoParam>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ae:	2301      	movs	r3, #1
 80013b0:	e016      	b.n	80013e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fa32 	bl	8001824 <DMA_CalcBaseAndBitshift>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	223f      	movs	r2, #63	; 0x3f
 80013ca:	409a      	lsls	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	f010803f 	.word	0xf010803f

080013ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fa:	f7ff fe2b 	bl	8001054 <HAL_GetTick>
 80013fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d008      	beq.n	800141e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e052      	b.n	80014c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0216 	bic.w	r2, r2, #22
 800142c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800143c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <HAL_DMA_Abort+0x62>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0208 	bic.w	r2, r2, #8
 800145c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	e013      	b.n	8001498 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001470:	f7ff fdf0 	bl	8001054 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b05      	cmp	r3, #5
 800147c:	d90c      	bls.n	8001498 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2220      	movs	r2, #32
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e015      	b.n	80014c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e4      	bne.n	8001470 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	223f      	movs	r2, #63	; 0x3f
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d004      	beq.n	80014ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00c      	b.n	8001504 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800151c:	4b8e      	ldr	r3, [pc, #568]	; (8001758 <HAL_DMA_IRQHandler+0x248>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a8e      	ldr	r2, [pc, #568]	; (800175c <HAL_DMA_IRQHandler+0x24c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0a9b      	lsrs	r3, r3, #10
 8001528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2208      	movs	r2, #8
 800153c:	409a      	lsls	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01a      	beq.n	800157c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0204 	bic.w	r2, r2, #4
 8001562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2201      	movs	r2, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f043 0202 	orr.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2204      	movs	r2, #4
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d012      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2204      	movs	r2, #4
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2210      	movs	r2, #16
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d043      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03c      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2210      	movs	r2, #16
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d018      	beq.n	8001652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d024      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
 800163e:	e01f      	b.n	8001680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
 8001650:	e016      	b.n	8001680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0208 	bic.w	r2, r2, #8
 800166e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2220      	movs	r2, #32
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 808f 	beq.w	80017b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8087 	beq.w	80017b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	2220      	movs	r2, #32
 80016a8:	409a      	lsls	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d136      	bne.n	8001728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0216 	bic.w	r2, r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <HAL_DMA_IRQHandler+0x1da>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0208 	bic.w	r2, r2, #8
 80016f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	223f      	movs	r2, #63	; 0x3f
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	2b00      	cmp	r3, #0
 800171c:	d07e      	beq.n	800181c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
        }
        return;
 8001726:	e079      	b.n	800181c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01d      	beq.n	8001772 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	2b00      	cmp	r3, #0
 800174a:	d031      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e02c      	b.n	80017b0 <HAL_DMA_IRQHandler+0x2a0>
 8001756:	bf00      	nop
 8001758:	200002d4 	.word	0x200002d4
 800175c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d023      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
 8001770:	e01e      	b.n	80017b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0210 	bic.w	r2, r2, #16
 800178e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d032      	beq.n	800181e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d022      	beq.n	800180a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2205      	movs	r2, #5
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3301      	adds	r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d307      	bcc.n	80017f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f2      	bne.n	80017dc <HAL_DMA_IRQHandler+0x2cc>
 80017f6:	e000      	b.n	80017fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
 800181a:	e000      	b.n	800181e <HAL_DMA_IRQHandler+0x30e>
        return;
 800181c:	bf00      	nop
    }
  }
}
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b10      	subs	r3, #16
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <DMA_CalcBaseAndBitshift+0x64>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <DMA_CalcBaseAndBitshift+0x68>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d909      	bls.n	8001866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
 8001864:	e007      	b.n	8001876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab
 800188c:	08004198 	.word	0x08004198

08001890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11f      	bne.n	80018ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d856      	bhi.n	800195e <DMA_CheckFifoParam+0xce>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <DMA_CheckFifoParam+0x28>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018db 	.word	0x080018db
 80018c0:	080018c9 	.word	0x080018c9
 80018c4:	0800195f 	.word	0x0800195f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d046      	beq.n	8001962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d8:	e043      	b.n	8001962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018e2:	d140      	bne.n	8001966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e8:	e03d      	b.n	8001966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f2:	d121      	bne.n	8001938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d837      	bhi.n	800196a <DMA_CheckFifoParam+0xda>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <DMA_CheckFifoParam+0x70>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001911 	.word	0x08001911
 8001904:	08001917 	.word	0x08001917
 8001908:	08001911 	.word	0x08001911
 800190c:	08001929 	.word	0x08001929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      break;
 8001914:	e030      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d025      	beq.n	800196e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001926:	e022      	b.n	800196e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001930:	d11f      	bne.n	8001972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001936:	e01c      	b.n	8001972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d903      	bls.n	8001946 <DMA_CheckFifoParam+0xb6>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d003      	beq.n	800194c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001944:	e018      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
      break;
 800194a:	e015      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      break;
 800195c:	e00b      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 800195e:	bf00      	nop
 8001960:	e00a      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e008      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e006      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;   
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001976:	bf00      	nop
    }
  } 
  
  return status; 
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e159      	b.n	8001c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8148 	bne.w	8001c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a2 	beq.w	8001c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1f6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1f2>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f aea2 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	041a      	lsls	r2, r3, #16
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	400b      	ands	r3, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e267      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d075      	beq.n	8001e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5e:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05b      	beq.n	8001e30 <HAL_RCC_OscConfig+0x108>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d157      	bne.n	8001e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e242      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x74>
 8001d8e:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6f      	ldr	r2, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xb0>
 8001dc0:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a68      	ldr	r2, [pc, #416]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff f938 	bl	8001054 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff f934 	bl	8001054 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e207      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xc0>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff f924 	bl	8001054 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff f920 	bl	8001054 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1f3      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0xe8>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1c7      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f8d9 	bl	8001054 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f8d5 	bl	8001054 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1a8      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4925      	ldr	r1, [pc, #148]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x244>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f8b8 	bl	8001054 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f8b4 	bl	8001054 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e187      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d036      	beq.n	8001f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f898 	bl	8001054 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff f894 	bl	8001054 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e167      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x200>
 8001f46:	e01b      	b.n	8001f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x248>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f881 	bl	8001054 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	e00e      	b.n	8001f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f87d 	bl	8001054 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d907      	bls.n	8001f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e150      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470000 	.word	0x42470000
 8001f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ea      	bne.n	8001f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8097 	beq.w	80020bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a7c      	ldr	r2, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b77      	ldr	r3, [pc, #476]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a73      	ldr	r2, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f83d 	bl	8001054 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff f839 	bl	8001054 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e10c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x474>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x2ea>
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x30c>
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a5e      	ldr	r2, [pc, #376]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0x324>
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a57      	ldr	r2, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002046:	f023 0304 	bic.w	r3, r3, #4
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe fffe 	bl	8001054 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7fe fffa 	bl	8001054 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0cb      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ee      	beq.n	800205c <HAL_RCC_OscConfig+0x334>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7fe ffe8 	bl	8001054 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	e00a      	b.n	800209e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7fe ffe4 	bl	8001054 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e0b5      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ee      	bne.n	8002088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a1 	beq.w	8002208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d05c      	beq.n	800218c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d141      	bne.n	800215e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffb8 	bl	8001054 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ffb4 	bl	8001054 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e087      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	491b      	ldr	r1, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe ff8d 	bl	8001054 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe ff89 	bl	8001054 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e05c      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x416>
 800215c:	e054      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x478>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe ff76 	bl	8001054 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe ff72 	bl	8001054 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e045      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_RCC_OscConfig+0x470>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x444>
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e038      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000
 80021a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x4ec>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d028      	beq.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d121      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d11a      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7fe fea4 	bl	8001054 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7fe fea0 	bl	8001054 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fe04 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08004180 	.word	0x08004180
 80023dc:	200002d4 	.word	0x200002d4
 80023e0:	200002d8 	.word	0x200002d8

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b094      	sub	sp, #80	; 0x50
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	647b      	str	r3, [r7, #68]	; 0x44
 80023f0:	2300      	movs	r3, #0
 80023f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f4:	2300      	movs	r3, #0
 80023f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fc:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d00d      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x40>
 8002408:	2b08      	cmp	r3, #8
 800240a:	f200 80e1 	bhi.w	80025d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x34>
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3a>
 8002416:	e0db      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800241c:	e0db      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002422:	e0d8      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242e:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2200      	movs	r2, #0
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
 8002444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
 8002452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	f04f 0000 	mov.w	r0, #0
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	0159      	lsls	r1, r3, #5
 8002464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002468:	0150      	lsls	r0, r2, #5
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4621      	mov	r1, r4
 8002470:	1a51      	subs	r1, r2, r1
 8002472:	6139      	str	r1, [r7, #16]
 8002474:	4629      	mov	r1, r5
 8002476:	eb63 0301 	sbc.w	r3, r3, r1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002488:	4659      	mov	r1, fp
 800248a:	018b      	lsls	r3, r1, #6
 800248c:	4651      	mov	r1, sl
 800248e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002492:	4651      	mov	r1, sl
 8002494:	018a      	lsls	r2, r1, #6
 8002496:	4651      	mov	r1, sl
 8002498:	ebb2 0801 	subs.w	r8, r2, r1
 800249c:	4659      	mov	r1, fp
 800249e:	eb63 0901 	sbc.w	r9, r3, r1
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b6:	4690      	mov	r8, r2
 80024b8:	4699      	mov	r9, r3
 80024ba:	4623      	mov	r3, r4
 80024bc:	eb18 0303 	adds.w	r3, r8, r3
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	462b      	mov	r3, r5
 80024c4:	eb49 0303 	adc.w	r3, r9, r3
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d6:	4629      	mov	r1, r5
 80024d8:	024b      	lsls	r3, r1, #9
 80024da:	4621      	mov	r1, r4
 80024dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024e0:	4621      	mov	r1, r4
 80024e2:	024a      	lsls	r2, r1, #9
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ea:	2200      	movs	r2, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f4:	f7fd fecc 	bl	8000290 <__aeabi_uldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4613      	mov	r3, r2
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002500:	e058      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	2200      	movs	r2, #0
 800250a:	4618      	mov	r0, r3
 800250c:	4611      	mov	r1, r2
 800250e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800251c:	4642      	mov	r2, r8
 800251e:	464b      	mov	r3, r9
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	0159      	lsls	r1, r3, #5
 800252a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252e:	0150      	lsls	r0, r2, #5
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4641      	mov	r1, r8
 8002536:	ebb2 0a01 	subs.w	sl, r2, r1
 800253a:	4649      	mov	r1, r9
 800253c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800254c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002554:	ebb2 040a 	subs.w	r4, r2, sl
 8002558:	eb63 050b 	sbc.w	r5, r3, fp
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	00eb      	lsls	r3, r5, #3
 8002566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256a:	00e2      	lsls	r2, r4, #3
 800256c:	4614      	mov	r4, r2
 800256e:	461d      	mov	r5, r3
 8002570:	4643      	mov	r3, r8
 8002572:	18e3      	adds	r3, r4, r3
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	464b      	mov	r3, r9
 8002578:	eb45 0303 	adc.w	r3, r5, r3
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258a:	4629      	mov	r1, r5
 800258c:	028b      	lsls	r3, r1, #10
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002594:	4621      	mov	r1, r4
 8002596:	028a      	lsls	r2, r1, #10
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259e:	2200      	movs	r2, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	61fa      	str	r2, [r7, #28]
 80025a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a8:	f7fd fe72 	bl	8000290 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	3301      	adds	r3, #1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3750      	adds	r7, #80	; 0x50
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	200002d4 	.word	0x200002d4

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff0 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0a9b      	lsrs	r3, r3, #10
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	08004190 	.word	0x08004190

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffdc 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0b5b      	lsrs	r3, r3, #13
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	08004190 	.word	0x08004190

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e03f      	b.n	80026ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fb12 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fe23 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b08a      	sub	sp, #40	; 0x28
 80026f6:	af02      	add	r7, sp, #8
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b20      	cmp	r3, #32
 8002710:	d17c      	bne.n	800280c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_UART_Transmit+0x2c>
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e075      	b.n	800280e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_UART_Transmit+0x3e>
 800272c:	2302      	movs	r3, #2
 800272e:	e06e      	b.n	800280e <HAL_UART_Transmit+0x11c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2221      	movs	r2, #33	; 0x21
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002746:	f7fe fc85 	bl	8001054 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x82>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002784:	e02a      	b.n	80027dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fb63 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e036      	b.n	800280e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	3302      	adds	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e007      	b.n	80027ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1cf      	bne.n	8002786 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2140      	movs	r1, #64	; 0x40
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fb33 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e006      	b.n	800280e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	d130      	bne.n	8002892 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Transmit_IT+0x26>
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e029      	b.n	8002894 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit_IT+0x38>
 800284a:	2302      	movs	r3, #2
 800284c:	e022      	b.n	8002894 <HAL_UART_Transmit_IT+0x7e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800288c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d11d      	bne.n	80028f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_UART_Receive_IT+0x26>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e016      	b.n	80028f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_UART_Receive_IT+0x38>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e00f      	b.n	80028f8 <HAL_UART_Receive_IT+0x58>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fb23 	bl	8002f38 <UART_Start_Receive_IT>
 80028f2:	4603      	mov	r3, r0
 80028f4:	e000      	b.n	80028f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b0ba      	sub	sp, #232	; 0xe8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800293e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_UART_IRQHandler+0x66>
 8002952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fc07 	bl	8003172 <UART_Receive_IT>
      return;
 8002964:	e256      	b.n	8002e14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80de 	beq.w	8002b2c <HAL_UART_IRQHandler+0x22c>
 8002970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002980:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80d1 	beq.w	8002b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_UART_IRQHandler+0xae>
 8002996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_UART_IRQHandler+0xd2>
 80029ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_UART_IRQHandler+0xf6>
 80029de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <HAL_UART_IRQHandler+0x126>
 8002a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0208 	orr.w	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 81ed 	beq.w	8002e0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_UART_IRQHandler+0x14e>
 8002a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fb92 	bl	8003172 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_UART_IRQHandler+0x17a>
 8002a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04f      	beq.n	8002b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa9a 	bl	8002fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d141      	bne.n	8002b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3314      	adds	r3, #20
 8002a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1d9      	bne.n	8002a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d013      	beq.n	8002b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	4a7d      	ldr	r2, [pc, #500]	; (8002cdc <HAL_UART_IRQHandler+0x3dc>)
 8002ae8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fcec 	bl	80014cc <HAL_DMA_Abort_IT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b04:	4610      	mov	r0, r2
 8002b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00e      	b.n	8002b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f990 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e00a      	b.n	8002b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f98c 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	e006      	b.n	8002b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f988 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b26:	e170      	b.n	8002e0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	bf00      	nop
    return;
 8002b2a:	e16e      	b.n	8002e0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f040 814a 	bne.w	8002dca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8143 	beq.w	8002dca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 813c 	beq.w	8002dca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	f040 80b4 	bne.w	8002ce0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8140 	beq.w	8002e0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b96:	429a      	cmp	r2, r3
 8002b98:	f080 8139 	bcs.w	8002e0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	f000 8088 	beq.w	8002cc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1d9      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e1      	bne.n	8002bfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e3      	bne.n	8002c3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ca4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ca6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e3      	bne.n	8002c80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fb95 	bl	80013ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8b6 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cd8:	e099      	b.n	8002e0e <HAL_UART_IRQHandler+0x50e>
 8002cda:	bf00      	nop
 8002cdc:	0800307b 	.word	0x0800307b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 808b 	beq.w	8002e12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8086 	beq.w	8002e12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e3      	bne.n	8002d06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3314      	adds	r3, #20
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d62:	633a      	str	r2, [r7, #48]	; 0x30
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e3      	bne.n	8002d3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0310 	bic.w	r3, r3, #16
 8002d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	617b      	str	r3, [r7, #20]
   return(result);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e3      	bne.n	8002d84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f83e 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dc8:	e023      	b.n	8002e12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_UART_IRQHandler+0x4ea>
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f95d 	bl	80030a2 <UART_Transmit_IT>
    return;
 8002de8:	e014      	b.n	8002e14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <HAL_UART_IRQHandler+0x514>
 8002df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f99d 	bl	8003142 <UART_EndTransmit_IT>
    return;
 8002e08:	e004      	b.n	8002e14 <HAL_UART_IRQHandler+0x514>
    return;
 8002e0a:	bf00      	nop
 8002e0c:	e002      	b.n	8002e14 <HAL_UART_IRQHandler+0x514>
      return;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HAL_UART_IRQHandler+0x514>
      return;
 8002e12:	bf00      	nop
  }
}
 8002e14:	37e8      	adds	r7, #232	; 0xe8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop

08002e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b090      	sub	sp, #64	; 0x40
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6c:	e050      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d04c      	beq.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7c:	f7fe f8ea 	bl	8001054 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d241      	bcs.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eac:	637a      	str	r2, [r7, #52]	; 0x34
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee0:	623a      	str	r2, [r7, #32]
 8002ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	69f9      	ldr	r1, [r7, #28]
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e00f      	b.n	8002f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d09f      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3740      	adds	r7, #64	; 0x40
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	88fa      	ldrh	r2, [r7, #6]
 8002f50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2222      	movs	r2, #34	; 0x22
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b095      	sub	sp, #84	; 0x54
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	2b01      	cmp	r3, #1
 800302a:	d119      	bne.n	8003060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	60bb      	str	r3, [r7, #8]
   return(result);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 0310 	bic.w	r3, r3, #16
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304c:	61ba      	str	r2, [r7, #24]
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	613b      	str	r3, [r7, #16]
   return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800306e:	bf00      	nop
 8003070:	3754      	adds	r7, #84	; 0x54
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff fecb 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b21      	cmp	r3, #33	; 0x21
 80030b4:	d13e      	bne.n	8003134 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030be:	d114      	bne.n	80030ea <UART_Transmit_IT+0x48>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d110      	bne.n	80030ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	1c9a      	adds	r2, r3, #2
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	621a      	str	r2, [r3, #32]
 80030e8:	e008      	b.n	80030fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6211      	str	r1, [r2, #32]
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4619      	mov	r1, r3
 800310a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10f      	bne.n	8003130 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003158:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe5a 	bl	8002e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08c      	sub	sp, #48	; 0x30
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b22      	cmp	r3, #34	; 0x22
 8003184:	f040 80ab 	bne.w	80032de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d117      	bne.n	80031c2 <UART_Receive_IT+0x50>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	1c9a      	adds	r2, r3, #2
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
 80031c0:	e026      	b.n	8003210 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	d007      	beq.n	80031e6 <UART_Receive_IT+0x74>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <UART_Receive_IT+0x82>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e008      	b.n	8003206 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29b      	uxth	r3, r3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4619      	mov	r1, r3
 800321e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003220:	2b00      	cmp	r3, #0
 8003222:	d15a      	bne.n	80032da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0220 	bic.w	r2, r2, #32
 8003232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	2b01      	cmp	r3, #1
 8003262:	d135      	bne.n	80032d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	613b      	str	r3, [r7, #16]
   return(result);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f023 0310 	bic.w	r3, r3, #16
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	623a      	str	r2, [r7, #32]
 800328c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	69f9      	ldr	r1, [r7, #28]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	61bb      	str	r3, [r7, #24]
   return(result);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e5      	bne.n	800326a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d10a      	bne.n	80032c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fdbb 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
 80032ce:	e002      	b.n	80032d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fd fc8b 	bl	8000bec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e002      	b.n	80032e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3730      	adds	r7, #48	; 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c0      	sub	sp, #256	; 0x100
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	ea40 0301 	orr.w	r3, r0, r1
 8003310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800334e:	430b      	orrs	r3, r1
 8003350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	ea40 0301 	orr.w	r3, r0, r1
 800336e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <UART_SetConfig+0x2cc>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0xa0>
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff f952 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 800338c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003390:	e003      	b.n	800339a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7ff f939 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 8003396:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	f040 810c 	bne.w	80035c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033c2:	415b      	adcs	r3, r3
 80033c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ca:	4621      	mov	r1, r4
 80033cc:	eb12 0801 	adds.w	r8, r2, r1
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb43 0901 	adc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800340e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	18db      	adds	r3, r3, r3
 800341a:	653b      	str	r3, [r7, #80]	; 0x50
 800341c:	4613      	mov	r3, r2
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	657b      	str	r3, [r7, #84]	; 0x54
 8003424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800342c:	f7fc ff30 	bl	8000290 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <UART_SetConfig+0x2d4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003448:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800344c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	64b9      	str	r1, [r7, #72]	; 0x48
 8003458:	415b      	adcs	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003460:	4641      	mov	r1, r8
 8003462:	eb12 0a01 	adds.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0b01 	adc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800347c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003480:	4692      	mov	sl, r2
 8003482:	469b      	mov	fp, r3
 8003484:	4643      	mov	r3, r8
 8003486:	eb1a 0303 	adds.w	r3, sl, r3
 800348a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348e:	464b      	mov	r3, r9
 8003490:	eb4b 0303 	adc.w	r3, fp, r3
 8003494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	; 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034c2:	f7fc fee5 	bl	8000290 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <UART_SetConfig+0x2d4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f0:	441c      	add	r4, r3
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	; 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6339      	str	r1, [r7, #48]	; 0x30
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003548:	464b      	mov	r3, r9
 800354a:	460a      	mov	r2, r1
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003560:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800357e:	f7fc fe87 	bl	8000290 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <UART_SetConfig+0x2d4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <UART_SetConfig+0x2d4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4422      	add	r2, r4
 80035ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b0:	e105      	b.n	80037be <UART_SetConfig+0x4d6>
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035d2:	4642      	mov	r2, r8
 80035d4:	464b      	mov	r3, r9
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	6239      	str	r1, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	4641      	mov	r1, r8
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0501 	adc.w	r5, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003608:	464b      	mov	r3, r9
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800362e:	4629      	mov	r1, r5
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4621      	mov	r1, r4
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003640:	f7fc fe26 	bl	8000290 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b60      	ldr	r3, [pc, #384]	; (80037cc <UART_SetConfig+0x4e4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800365c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	415b      	adcs	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	4641      	mov	r1, r8
 8003676:	1851      	adds	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4649      	mov	r1, r9
 800367c:	414b      	adcs	r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4651      	mov	r1, sl
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4642      	mov	r2, r8
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036cc:	4649      	mov	r1, r9
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d6:	4641      	mov	r1, r8
 80036d8:	008a      	lsls	r2, r1, #2
 80036da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036de:	f7fc fdd7 	bl	8000290 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <UART_SetConfig+0x4e4>)
 80036e8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	4a34      	ldr	r2, [pc, #208]	; (80037cc <UART_SetConfig+0x4e4>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003706:	441c      	add	r4, r3
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	2200      	movs	r2, #0
 800370e:	673b      	str	r3, [r7, #112]	; 0x70
 8003710:	677a      	str	r2, [r7, #116]	; 0x74
 8003712:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003716:	4642      	mov	r2, r8
 8003718:	464b      	mov	r3, r9
 800371a:	1891      	adds	r1, r2, r2
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	415b      	adcs	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003726:	4641      	mov	r1, r8
 8003728:	1851      	adds	r1, r2, r1
 800372a:	6039      	str	r1, [r7, #0]
 800372c:	4649      	mov	r1, r9
 800372e:	414b      	adcs	r3, r1
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800373e:	4659      	mov	r1, fp
 8003740:	00cb      	lsls	r3, r1, #3
 8003742:	4651      	mov	r1, sl
 8003744:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003748:	4651      	mov	r1, sl
 800374a:	00ca      	lsls	r2, r1, #3
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	4603      	mov	r3, r0
 8003752:	4642      	mov	r2, r8
 8003754:	189b      	adds	r3, r3, r2
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
 8003758:	464b      	mov	r3, r9
 800375a:	460a      	mov	r2, r1
 800375c:	eb42 0303 	adc.w	r3, r2, r3
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	663b      	str	r3, [r7, #96]	; 0x60
 800376c:	667a      	str	r2, [r7, #100]	; 0x64
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800377a:	4649      	mov	r1, r9
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4641      	mov	r1, r8
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4641      	mov	r1, r8
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800378c:	f7fc fd80 	bl	8000290 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x4e4>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2164      	movs	r1, #100	; 0x64
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x4e4>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4422      	add	r2, r4
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	bf00      	nop
 80037c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <__errno>:
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <__errno+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200002e0 	.word	0x200002e0

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	4d0d      	ldr	r5, [pc, #52]	; (8003814 <__libc_init_array+0x38>)
 80037e0:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e2:	1b64      	subs	r4, r4, r5
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	2600      	movs	r6, #0
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	4d0b      	ldr	r5, [pc, #44]	; (800381c <__libc_init_array+0x40>)
 80037ee:	4c0c      	ldr	r4, [pc, #48]	; (8003820 <__libc_init_array+0x44>)
 80037f0:	f000 fc8e 	bl	8004110 <_init>
 80037f4:	1b64      	subs	r4, r4, r5
 80037f6:	10a4      	asrs	r4, r4, #2
 80037f8:	2600      	movs	r6, #0
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	080041dc 	.word	0x080041dc
 8003818:	080041dc 	.word	0x080041dc
 800381c:	080041dc 	.word	0x080041dc
 8003820:	080041e0 	.word	0x080041e0

08003824 <memset>:
 8003824:	4402      	add	r2, r0
 8003826:	4603      	mov	r3, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <siprintf>:
 8003834:	b40e      	push	{r1, r2, r3}
 8003836:	b500      	push	{lr}
 8003838:	b09c      	sub	sp, #112	; 0x70
 800383a:	ab1d      	add	r3, sp, #116	; 0x74
 800383c:	9002      	str	r0, [sp, #8]
 800383e:	9006      	str	r0, [sp, #24]
 8003840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003844:	4809      	ldr	r0, [pc, #36]	; (800386c <siprintf+0x38>)
 8003846:	9107      	str	r1, [sp, #28]
 8003848:	9104      	str	r1, [sp, #16]
 800384a:	4909      	ldr	r1, [pc, #36]	; (8003870 <siprintf+0x3c>)
 800384c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003850:	9105      	str	r1, [sp, #20]
 8003852:	6800      	ldr	r0, [r0, #0]
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	a902      	add	r1, sp, #8
 8003858:	f000 f868 	bl	800392c <_svfiprintf_r>
 800385c:	9b02      	ldr	r3, [sp, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	b01c      	add	sp, #112	; 0x70
 8003864:	f85d eb04 	ldr.w	lr, [sp], #4
 8003868:	b003      	add	sp, #12
 800386a:	4770      	bx	lr
 800386c:	200002e0 	.word	0x200002e0
 8003870:	ffff0208 	.word	0xffff0208

08003874 <__ssputs_r>:
 8003874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	688e      	ldr	r6, [r1, #8]
 800387a:	429e      	cmp	r6, r3
 800387c:	4682      	mov	sl, r0
 800387e:	460c      	mov	r4, r1
 8003880:	4690      	mov	r8, r2
 8003882:	461f      	mov	r7, r3
 8003884:	d838      	bhi.n	80038f8 <__ssputs_r+0x84>
 8003886:	898a      	ldrh	r2, [r1, #12]
 8003888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800388c:	d032      	beq.n	80038f4 <__ssputs_r+0x80>
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	6909      	ldr	r1, [r1, #16]
 8003892:	eba5 0901 	sub.w	r9, r5, r1
 8003896:	6965      	ldr	r5, [r4, #20]
 8003898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800389c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038a0:	3301      	adds	r3, #1
 80038a2:	444b      	add	r3, r9
 80038a4:	106d      	asrs	r5, r5, #1
 80038a6:	429d      	cmp	r5, r3
 80038a8:	bf38      	it	cc
 80038aa:	461d      	movcc	r5, r3
 80038ac:	0553      	lsls	r3, r2, #21
 80038ae:	d531      	bpl.n	8003914 <__ssputs_r+0xa0>
 80038b0:	4629      	mov	r1, r5
 80038b2:	f000 fb63 	bl	8003f7c <_malloc_r>
 80038b6:	4606      	mov	r6, r0
 80038b8:	b950      	cbnz	r0, 80038d0 <__ssputs_r+0x5c>
 80038ba:	230c      	movs	r3, #12
 80038bc:	f8ca 3000 	str.w	r3, [sl]
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c6:	81a3      	strh	r3, [r4, #12]
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	6921      	ldr	r1, [r4, #16]
 80038d2:	464a      	mov	r2, r9
 80038d4:	f000 fabe 	bl	8003e54 <memcpy>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	6126      	str	r6, [r4, #16]
 80038e6:	6165      	str	r5, [r4, #20]
 80038e8:	444e      	add	r6, r9
 80038ea:	eba5 0509 	sub.w	r5, r5, r9
 80038ee:	6026      	str	r6, [r4, #0]
 80038f0:	60a5      	str	r5, [r4, #8]
 80038f2:	463e      	mov	r6, r7
 80038f4:	42be      	cmp	r6, r7
 80038f6:	d900      	bls.n	80038fa <__ssputs_r+0x86>
 80038f8:	463e      	mov	r6, r7
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	4632      	mov	r2, r6
 80038fe:	4641      	mov	r1, r8
 8003900:	f000 fab6 	bl	8003e70 <memmove>
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	1b9b      	subs	r3, r3, r6
 8003908:	60a3      	str	r3, [r4, #8]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	4433      	add	r3, r6
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	2000      	movs	r0, #0
 8003912:	e7db      	b.n	80038cc <__ssputs_r+0x58>
 8003914:	462a      	mov	r2, r5
 8003916:	f000 fba5 	bl	8004064 <_realloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d1e1      	bne.n	80038e4 <__ssputs_r+0x70>
 8003920:	6921      	ldr	r1, [r4, #16]
 8003922:	4650      	mov	r0, sl
 8003924:	f000 fabe 	bl	8003ea4 <_free_r>
 8003928:	e7c7      	b.n	80038ba <__ssputs_r+0x46>
	...

0800392c <_svfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	4698      	mov	r8, r3
 8003932:	898b      	ldrh	r3, [r1, #12]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	b09d      	sub	sp, #116	; 0x74
 8003938:	4607      	mov	r7, r0
 800393a:	460d      	mov	r5, r1
 800393c:	4614      	mov	r4, r2
 800393e:	d50e      	bpl.n	800395e <_svfiprintf_r+0x32>
 8003940:	690b      	ldr	r3, [r1, #16]
 8003942:	b963      	cbnz	r3, 800395e <_svfiprintf_r+0x32>
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	f000 fb19 	bl	8003f7c <_malloc_r>
 800394a:	6028      	str	r0, [r5, #0]
 800394c:	6128      	str	r0, [r5, #16]
 800394e:	b920      	cbnz	r0, 800395a <_svfiprintf_r+0x2e>
 8003950:	230c      	movs	r3, #12
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	e0d1      	b.n	8003afe <_svfiprintf_r+0x1d2>
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	616b      	str	r3, [r5, #20]
 800395e:	2300      	movs	r3, #0
 8003960:	9309      	str	r3, [sp, #36]	; 0x24
 8003962:	2320      	movs	r3, #32
 8003964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003968:	f8cd 800c 	str.w	r8, [sp, #12]
 800396c:	2330      	movs	r3, #48	; 0x30
 800396e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b18 <_svfiprintf_r+0x1ec>
 8003972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003976:	f04f 0901 	mov.w	r9, #1
 800397a:	4623      	mov	r3, r4
 800397c:	469a      	mov	sl, r3
 800397e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003982:	b10a      	cbz	r2, 8003988 <_svfiprintf_r+0x5c>
 8003984:	2a25      	cmp	r2, #37	; 0x25
 8003986:	d1f9      	bne.n	800397c <_svfiprintf_r+0x50>
 8003988:	ebba 0b04 	subs.w	fp, sl, r4
 800398c:	d00b      	beq.n	80039a6 <_svfiprintf_r+0x7a>
 800398e:	465b      	mov	r3, fp
 8003990:	4622      	mov	r2, r4
 8003992:	4629      	mov	r1, r5
 8003994:	4638      	mov	r0, r7
 8003996:	f7ff ff6d 	bl	8003874 <__ssputs_r>
 800399a:	3001      	adds	r0, #1
 800399c:	f000 80aa 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a2:	445a      	add	r2, fp
 80039a4:	9209      	str	r2, [sp, #36]	; 0x24
 80039a6:	f89a 3000 	ldrb.w	r3, [sl]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a2 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ba:	f10a 0a01 	add.w	sl, sl, #1
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	9307      	str	r3, [sp, #28]
 80039c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c6:	931a      	str	r3, [sp, #104]	; 0x68
 80039c8:	4654      	mov	r4, sl
 80039ca:	2205      	movs	r2, #5
 80039cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d0:	4851      	ldr	r0, [pc, #324]	; (8003b18 <_svfiprintf_r+0x1ec>)
 80039d2:	f7fc fc0d 	bl	80001f0 <memchr>
 80039d6:	9a04      	ldr	r2, [sp, #16]
 80039d8:	b9d8      	cbnz	r0, 8003a12 <_svfiprintf_r+0xe6>
 80039da:	06d0      	lsls	r0, r2, #27
 80039dc:	bf44      	itt	mi
 80039de:	2320      	movmi	r3, #32
 80039e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e4:	0711      	lsls	r1, r2, #28
 80039e6:	bf44      	itt	mi
 80039e8:	232b      	movmi	r3, #43	; 0x2b
 80039ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d015      	beq.n	8003a22 <_svfiprintf_r+0xf6>
 80039f6:	9a07      	ldr	r2, [sp, #28]
 80039f8:	4654      	mov	r4, sl
 80039fa:	2000      	movs	r0, #0
 80039fc:	f04f 0c0a 	mov.w	ip, #10
 8003a00:	4621      	mov	r1, r4
 8003a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a06:	3b30      	subs	r3, #48	; 0x30
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d94e      	bls.n	8003aaa <_svfiprintf_r+0x17e>
 8003a0c:	b1b0      	cbz	r0, 8003a3c <_svfiprintf_r+0x110>
 8003a0e:	9207      	str	r2, [sp, #28]
 8003a10:	e014      	b.n	8003a3c <_svfiprintf_r+0x110>
 8003a12:	eba0 0308 	sub.w	r3, r0, r8
 8003a16:	fa09 f303 	lsl.w	r3, r9, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	9304      	str	r3, [sp, #16]
 8003a1e:	46a2      	mov	sl, r4
 8003a20:	e7d2      	b.n	80039c8 <_svfiprintf_r+0x9c>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfbb      	ittet	lt
 8003a2e:	425b      	neglt	r3, r3
 8003a30:	f042 0202 	orrlt.w	r2, r2, #2
 8003a34:	9307      	strge	r3, [sp, #28]
 8003a36:	9307      	strlt	r3, [sp, #28]
 8003a38:	bfb8      	it	lt
 8003a3a:	9204      	strlt	r2, [sp, #16]
 8003a3c:	7823      	ldrb	r3, [r4, #0]
 8003a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a40:	d10c      	bne.n	8003a5c <_svfiprintf_r+0x130>
 8003a42:	7863      	ldrb	r3, [r4, #1]
 8003a44:	2b2a      	cmp	r3, #42	; 0x2a
 8003a46:	d135      	bne.n	8003ab4 <_svfiprintf_r+0x188>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	9203      	str	r2, [sp, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bfb8      	it	lt
 8003a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a58:	3402      	adds	r4, #2
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b28 <_svfiprintf_r+0x1fc>
 8003a60:	7821      	ldrb	r1, [r4, #0]
 8003a62:	2203      	movs	r2, #3
 8003a64:	4650      	mov	r0, sl
 8003a66:	f7fc fbc3 	bl	80001f0 <memchr>
 8003a6a:	b140      	cbz	r0, 8003a7e <_svfiprintf_r+0x152>
 8003a6c:	2340      	movs	r3, #64	; 0x40
 8003a6e:	eba0 000a 	sub.w	r0, r0, sl
 8003a72:	fa03 f000 	lsl.w	r0, r3, r0
 8003a76:	9b04      	ldr	r3, [sp, #16]
 8003a78:	4303      	orrs	r3, r0
 8003a7a:	3401      	adds	r4, #1
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a82:	4826      	ldr	r0, [pc, #152]	; (8003b1c <_svfiprintf_r+0x1f0>)
 8003a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a88:	2206      	movs	r2, #6
 8003a8a:	f7fc fbb1 	bl	80001f0 <memchr>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d038      	beq.n	8003b04 <_svfiprintf_r+0x1d8>
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <_svfiprintf_r+0x1f4>)
 8003a94:	bb1b      	cbnz	r3, 8003ade <_svfiprintf_r+0x1b2>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	4433      	add	r3, r6
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e767      	b.n	800397a <_svfiprintf_r+0x4e>
 8003aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aae:	460c      	mov	r4, r1
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	e7a5      	b.n	8003a00 <_svfiprintf_r+0xd4>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	3401      	adds	r4, #1
 8003ab8:	9305      	str	r3, [sp, #20]
 8003aba:	4619      	mov	r1, r3
 8003abc:	f04f 0c0a 	mov.w	ip, #10
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac6:	3a30      	subs	r2, #48	; 0x30
 8003ac8:	2a09      	cmp	r2, #9
 8003aca:	d903      	bls.n	8003ad4 <_svfiprintf_r+0x1a8>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0c5      	beq.n	8003a5c <_svfiprintf_r+0x130>
 8003ad0:	9105      	str	r1, [sp, #20]
 8003ad2:	e7c3      	b.n	8003a5c <_svfiprintf_r+0x130>
 8003ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ad8:	4604      	mov	r4, r0
 8003ada:	2301      	movs	r3, #1
 8003adc:	e7f0      	b.n	8003ac0 <_svfiprintf_r+0x194>
 8003ade:	ab03      	add	r3, sp, #12
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003ae6:	a904      	add	r1, sp, #16
 8003ae8:	4638      	mov	r0, r7
 8003aea:	f3af 8000 	nop.w
 8003aee:	1c42      	adds	r2, r0, #1
 8003af0:	4606      	mov	r6, r0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfiprintf_r+0x176>
 8003af4:	89ab      	ldrh	r3, [r5, #12]
 8003af6:	065b      	lsls	r3, r3, #25
 8003af8:	f53f af2c 	bmi.w	8003954 <_svfiprintf_r+0x28>
 8003afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afe:	b01d      	add	sp, #116	; 0x74
 8003b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	ab03      	add	r3, sp, #12
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	4638      	mov	r0, r7
 8003b10:	f000 f87a 	bl	8003c08 <_printf_i>
 8003b14:	e7eb      	b.n	8003aee <_svfiprintf_r+0x1c2>
 8003b16:	bf00      	nop
 8003b18:	080041a0 	.word	0x080041a0
 8003b1c:	080041aa 	.word	0x080041aa
 8003b20:	00000000 	.word	0x00000000
 8003b24:	08003875 	.word	0x08003875
 8003b28:	080041a6 	.word	0x080041a6

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bfb8      	it	lt
 8003b40:	4613      	movlt	r3, r2
 8003b42:	6033      	str	r3, [r6, #0]
 8003b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b48:	4607      	mov	r7, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc26      	bgt.n	8003bc2 <_printf_common+0x96>
 8003b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b78:	1e13      	subs	r3, r2, #0
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d42b      	bmi.n	8003bdc <_printf_common+0xb0>
 8003b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d01e      	beq.n	8003bd0 <_printf_common+0xa4>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	68e5      	ldr	r5, [r4, #12]
 8003b96:	6832      	ldr	r2, [r6, #0]
 8003b98:	f003 0306 	and.w	r3, r3, #6
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	bf08      	it	eq
 8003ba0:	1aad      	subeq	r5, r5, r2
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	6922      	ldr	r2, [r4, #16]
 8003ba6:	bf0c      	ite	eq
 8003ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bac:	2500      	movne	r5, #0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	bfc4      	itt	gt
 8003bb2:	1a9b      	subgt	r3, r3, r2
 8003bb4:	18ed      	addgt	r5, r5, r3
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	341a      	adds	r4, #26
 8003bba:	42b5      	cmp	r5, r6
 8003bbc:	d11a      	bne.n	8003bf4 <_printf_common+0xc8>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e008      	b.n	8003bd4 <_printf_common+0xa8>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4652      	mov	r2, sl
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4638      	mov	r0, r7
 8003bca:	47c0      	blx	r8
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d103      	bne.n	8003bd8 <_printf_common+0xac>
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	3501      	adds	r5, #1
 8003bda:	e7c6      	b.n	8003b6a <_printf_common+0x3e>
 8003bdc:	18e1      	adds	r1, r4, r3
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	2030      	movs	r0, #48	; 0x30
 8003be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be6:	4422      	add	r2, r4
 8003be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	e7c7      	b.n	8003b84 <_printf_common+0x58>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	47c0      	blx	r8
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d0e6      	beq.n	8003bd0 <_printf_common+0xa4>
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7d9      	b.n	8003bba <_printf_common+0x8e>
	...

08003c08 <_printf_i>:
 8003c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	7e0f      	ldrb	r7, [r1, #24]
 8003c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c10:	2f78      	cmp	r7, #120	; 0x78
 8003c12:	4691      	mov	r9, r2
 8003c14:	4680      	mov	r8, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	469a      	mov	sl, r3
 8003c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c1e:	d807      	bhi.n	8003c30 <_printf_i+0x28>
 8003c20:	2f62      	cmp	r7, #98	; 0x62
 8003c22:	d80a      	bhi.n	8003c3a <_printf_i+0x32>
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	f000 80d8 	beq.w	8003dda <_printf_i+0x1d2>
 8003c2a:	2f58      	cmp	r7, #88	; 0x58
 8003c2c:	f000 80a3 	beq.w	8003d76 <_printf_i+0x16e>
 8003c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c38:	e03a      	b.n	8003cb0 <_printf_i+0xa8>
 8003c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c3e:	2b15      	cmp	r3, #21
 8003c40:	d8f6      	bhi.n	8003c30 <_printf_i+0x28>
 8003c42:	a101      	add	r1, pc, #4	; (adr r1, 8003c48 <_printf_i+0x40>)
 8003c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003c31 	.word	0x08003c31
 8003c54:	08003c31 	.word	0x08003c31
 8003c58:	08003c31 	.word	0x08003c31
 8003c5c:	08003c31 	.word	0x08003c31
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003c31 	.word	0x08003c31
 8003c68:	08003c31 	.word	0x08003c31
 8003c6c:	08003c31 	.word	0x08003c31
 8003c70:	08003c31 	.word	0x08003c31
 8003c74:	08003dc1 	.word	0x08003dc1
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003da3 	.word	0x08003da3
 8003c80:	08003c31 	.word	0x08003c31
 8003c84:	08003c31 	.word	0x08003c31
 8003c88:	08003de3 	.word	0x08003de3
 8003c8c:	08003c31 	.word	0x08003c31
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c31 	.word	0x08003c31
 8003c98:	08003c31 	.word	0x08003c31
 8003c9c:	08003dab 	.word	0x08003dab
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	602a      	str	r2, [r5, #0]
 8003ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a3      	b.n	8003dfc <_printf_i+0x1f4>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	6829      	ldr	r1, [r5, #0]
 8003cb8:	0606      	lsls	r6, r0, #24
 8003cba:	f101 0304 	add.w	r3, r1, #4
 8003cbe:	d50a      	bpl.n	8003cd6 <_printf_i+0xce>
 8003cc0:	680e      	ldr	r6, [r1, #0]
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	da03      	bge.n	8003cd0 <_printf_i+0xc8>
 8003cc8:	232d      	movs	r3, #45	; 0x2d
 8003cca:	4276      	negs	r6, r6
 8003ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd0:	485e      	ldr	r0, [pc, #376]	; (8003e4c <_printf_i+0x244>)
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	e019      	b.n	8003d0a <_printf_i+0x102>
 8003cd6:	680e      	ldr	r6, [r1, #0]
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cde:	bf18      	it	ne
 8003ce0:	b236      	sxthne	r6, r6
 8003ce2:	e7ef      	b.n	8003cc4 <_printf_i+0xbc>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	6029      	str	r1, [r5, #0]
 8003cec:	0601      	lsls	r1, r0, #24
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0xec>
 8003cf0:	681e      	ldr	r6, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <_printf_i+0xf2>
 8003cf4:	0646      	lsls	r6, r0, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0xe8>
 8003cf8:	881e      	ldrh	r6, [r3, #0]
 8003cfa:	4854      	ldr	r0, [pc, #336]	; (8003e4c <_printf_i+0x244>)
 8003cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8003cfe:	bf0c      	ite	eq
 8003d00:	2308      	moveq	r3, #8
 8003d02:	230a      	movne	r3, #10
 8003d04:	2100      	movs	r1, #0
 8003d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0a:	6865      	ldr	r5, [r4, #4]
 8003d0c:	60a5      	str	r5, [r4, #8]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	bfa2      	ittt	ge
 8003d12:	6821      	ldrge	r1, [r4, #0]
 8003d14:	f021 0104 	bicge.w	r1, r1, #4
 8003d18:	6021      	strge	r1, [r4, #0]
 8003d1a:	b90e      	cbnz	r6, 8003d20 <_printf_i+0x118>
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	d04d      	beq.n	8003dbc <_printf_i+0x1b4>
 8003d20:	4615      	mov	r5, r2
 8003d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d26:	fb03 6711 	mls	r7, r3, r1, r6
 8003d2a:	5dc7      	ldrb	r7, [r0, r7]
 8003d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d30:	4637      	mov	r7, r6
 8003d32:	42bb      	cmp	r3, r7
 8003d34:	460e      	mov	r6, r1
 8003d36:	d9f4      	bls.n	8003d22 <_printf_i+0x11a>
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d10b      	bne.n	8003d54 <_printf_i+0x14c>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	07de      	lsls	r6, r3, #31
 8003d40:	d508      	bpl.n	8003d54 <_printf_i+0x14c>
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	6861      	ldr	r1, [r4, #4]
 8003d46:	4299      	cmp	r1, r3
 8003d48:	bfde      	ittt	le
 8003d4a:	2330      	movle	r3, #48	; 0x30
 8003d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d54:	1b52      	subs	r2, r2, r5
 8003d56:	6122      	str	r2, [r4, #16]
 8003d58:	f8cd a000 	str.w	sl, [sp]
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	aa03      	add	r2, sp, #12
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f7ff fee2 	bl	8003b2c <_printf_common>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d14c      	bne.n	8003e06 <_printf_i+0x1fe>
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	b004      	add	sp, #16
 8003d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d76:	4835      	ldr	r0, [pc, #212]	; (8003e4c <_printf_i+0x244>)
 8003d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d7c:	6829      	ldr	r1, [r5, #0]
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d84:	6029      	str	r1, [r5, #0]
 8003d86:	061d      	lsls	r5, r3, #24
 8003d88:	d514      	bpl.n	8003db4 <_printf_i+0x1ac>
 8003d8a:	07df      	lsls	r7, r3, #31
 8003d8c:	bf44      	itt	mi
 8003d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d92:	6023      	strmi	r3, [r4, #0]
 8003d94:	b91e      	cbnz	r6, 8003d9e <_printf_i+0x196>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	f023 0320 	bic.w	r3, r3, #32
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	2310      	movs	r3, #16
 8003da0:	e7b0      	b.n	8003d04 <_printf_i+0xfc>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	f043 0320 	orr.w	r3, r3, #32
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	2378      	movs	r3, #120	; 0x78
 8003dac:	4828      	ldr	r0, [pc, #160]	; (8003e50 <_printf_i+0x248>)
 8003dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db2:	e7e3      	b.n	8003d7c <_printf_i+0x174>
 8003db4:	0659      	lsls	r1, r3, #25
 8003db6:	bf48      	it	mi
 8003db8:	b2b6      	uxthmi	r6, r6
 8003dba:	e7e6      	b.n	8003d8a <_printf_i+0x182>
 8003dbc:	4615      	mov	r5, r2
 8003dbe:	e7bb      	b.n	8003d38 <_printf_i+0x130>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	6826      	ldr	r6, [r4, #0]
 8003dc4:	6961      	ldr	r1, [r4, #20]
 8003dc6:	1d18      	adds	r0, r3, #4
 8003dc8:	6028      	str	r0, [r5, #0]
 8003dca:	0635      	lsls	r5, r6, #24
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0x1cc>
 8003dd0:	6019      	str	r1, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0x1d2>
 8003dd4:	0670      	lsls	r0, r6, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0x1c8>
 8003dd8:	8019      	strh	r1, [r3, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	4615      	mov	r5, r2
 8003de0:	e7ba      	b.n	8003d58 <_printf_i+0x150>
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	602a      	str	r2, [r5, #0]
 8003de8:	681d      	ldr	r5, [r3, #0]
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7fc f9fe 	bl	80001f0 <memchr>
 8003df4:	b108      	cbz	r0, 8003dfa <_printf_i+0x1f2>
 8003df6:	1b40      	subs	r0, r0, r5
 8003df8:	6060      	str	r0, [r4, #4]
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e04:	e7a8      	b.n	8003d58 <_printf_i+0x150>
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	47d0      	blx	sl
 8003e10:	3001      	adds	r0, #1
 8003e12:	d0ab      	beq.n	8003d6c <_printf_i+0x164>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	079b      	lsls	r3, r3, #30
 8003e18:	d413      	bmi.n	8003e42 <_printf_i+0x23a>
 8003e1a:	68e0      	ldr	r0, [r4, #12]
 8003e1c:	9b03      	ldr	r3, [sp, #12]
 8003e1e:	4298      	cmp	r0, r3
 8003e20:	bfb8      	it	lt
 8003e22:	4618      	movlt	r0, r3
 8003e24:	e7a4      	b.n	8003d70 <_printf_i+0x168>
 8003e26:	2301      	movs	r3, #1
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	47d0      	blx	sl
 8003e30:	3001      	adds	r0, #1
 8003e32:	d09b      	beq.n	8003d6c <_printf_i+0x164>
 8003e34:	3501      	adds	r5, #1
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	9903      	ldr	r1, [sp, #12]
 8003e3a:	1a5b      	subs	r3, r3, r1
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dcf2      	bgt.n	8003e26 <_printf_i+0x21e>
 8003e40:	e7eb      	b.n	8003e1a <_printf_i+0x212>
 8003e42:	2500      	movs	r5, #0
 8003e44:	f104 0619 	add.w	r6, r4, #25
 8003e48:	e7f5      	b.n	8003e36 <_printf_i+0x22e>
 8003e4a:	bf00      	nop
 8003e4c:	080041b1 	.word	0x080041b1
 8003e50:	080041c2 	.word	0x080041c2

08003e54 <memcpy>:
 8003e54:	440a      	add	r2, r1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5c:	d100      	bne.n	8003e60 <memcpy+0xc>
 8003e5e:	4770      	bx	lr
 8003e60:	b510      	push	{r4, lr}
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	d1f9      	bne.n	8003e62 <memcpy+0xe>
 8003e6e:	bd10      	pop	{r4, pc}

08003e70 <memmove>:
 8003e70:	4288      	cmp	r0, r1
 8003e72:	b510      	push	{r4, lr}
 8003e74:	eb01 0402 	add.w	r4, r1, r2
 8003e78:	d902      	bls.n	8003e80 <memmove+0x10>
 8003e7a:	4284      	cmp	r4, r0
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	d807      	bhi.n	8003e90 <memmove+0x20>
 8003e80:	1e43      	subs	r3, r0, #1
 8003e82:	42a1      	cmp	r1, r4
 8003e84:	d008      	beq.n	8003e98 <memmove+0x28>
 8003e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e8e:	e7f8      	b.n	8003e82 <memmove+0x12>
 8003e90:	4402      	add	r2, r0
 8003e92:	4601      	mov	r1, r0
 8003e94:	428a      	cmp	r2, r1
 8003e96:	d100      	bne.n	8003e9a <memmove+0x2a>
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ea2:	e7f7      	b.n	8003e94 <memmove+0x24>

08003ea4 <_free_r>:
 8003ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d044      	beq.n	8003f34 <_free_r+0x90>
 8003eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eae:	9001      	str	r0, [sp, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8003eb6:	bfb8      	it	lt
 8003eb8:	18e4      	addlt	r4, r4, r3
 8003eba:	f000 f913 	bl	80040e4 <__malloc_lock>
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <_free_r+0x94>)
 8003ec0:	9801      	ldr	r0, [sp, #4]
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	b933      	cbnz	r3, 8003ed4 <_free_r+0x30>
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	6014      	str	r4, [r2, #0]
 8003eca:	b003      	add	sp, #12
 8003ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ed0:	f000 b90e 	b.w	80040f0 <__malloc_unlock>
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	d908      	bls.n	8003eea <_free_r+0x46>
 8003ed8:	6825      	ldr	r5, [r4, #0]
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf01      	itttt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	1949      	addeq	r1, r1, r5
 8003ee6:	6021      	streq	r1, [r4, #0]
 8003ee8:	e7ed      	b.n	8003ec6 <_free_r+0x22>
 8003eea:	461a      	mov	r2, r3
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b10b      	cbz	r3, 8003ef4 <_free_r+0x50>
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d9fa      	bls.n	8003eea <_free_r+0x46>
 8003ef4:	6811      	ldr	r1, [r2, #0]
 8003ef6:	1855      	adds	r5, r2, r1
 8003ef8:	42a5      	cmp	r5, r4
 8003efa:	d10b      	bne.n	8003f14 <_free_r+0x70>
 8003efc:	6824      	ldr	r4, [r4, #0]
 8003efe:	4421      	add	r1, r4
 8003f00:	1854      	adds	r4, r2, r1
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	6011      	str	r1, [r2, #0]
 8003f06:	d1e0      	bne.n	8003eca <_free_r+0x26>
 8003f08:	681c      	ldr	r4, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	6053      	str	r3, [r2, #4]
 8003f0e:	4421      	add	r1, r4
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	e7da      	b.n	8003eca <_free_r+0x26>
 8003f14:	d902      	bls.n	8003f1c <_free_r+0x78>
 8003f16:	230c      	movs	r3, #12
 8003f18:	6003      	str	r3, [r0, #0]
 8003f1a:	e7d6      	b.n	8003eca <_free_r+0x26>
 8003f1c:	6825      	ldr	r5, [r4, #0]
 8003f1e:	1961      	adds	r1, r4, r5
 8003f20:	428b      	cmp	r3, r1
 8003f22:	bf04      	itt	eq
 8003f24:	6819      	ldreq	r1, [r3, #0]
 8003f26:	685b      	ldreq	r3, [r3, #4]
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	bf04      	itt	eq
 8003f2c:	1949      	addeq	r1, r1, r5
 8003f2e:	6021      	streq	r1, [r4, #0]
 8003f30:	6054      	str	r4, [r2, #4]
 8003f32:	e7ca      	b.n	8003eca <_free_r+0x26>
 8003f34:	b003      	add	sp, #12
 8003f36:	bd30      	pop	{r4, r5, pc}
 8003f38:	200004a8 	.word	0x200004a8

08003f3c <sbrk_aligned>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4e0e      	ldr	r6, [pc, #56]	; (8003f78 <sbrk_aligned+0x3c>)
 8003f40:	460c      	mov	r4, r1
 8003f42:	6831      	ldr	r1, [r6, #0]
 8003f44:	4605      	mov	r5, r0
 8003f46:	b911      	cbnz	r1, 8003f4e <sbrk_aligned+0x12>
 8003f48:	f000 f8bc 	bl	80040c4 <_sbrk_r>
 8003f4c:	6030      	str	r0, [r6, #0]
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4628      	mov	r0, r5
 8003f52:	f000 f8b7 	bl	80040c4 <_sbrk_r>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d00a      	beq.n	8003f70 <sbrk_aligned+0x34>
 8003f5a:	1cc4      	adds	r4, r0, #3
 8003f5c:	f024 0403 	bic.w	r4, r4, #3
 8003f60:	42a0      	cmp	r0, r4
 8003f62:	d007      	beq.n	8003f74 <sbrk_aligned+0x38>
 8003f64:	1a21      	subs	r1, r4, r0
 8003f66:	4628      	mov	r0, r5
 8003f68:	f000 f8ac 	bl	80040c4 <_sbrk_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d101      	bne.n	8003f74 <sbrk_aligned+0x38>
 8003f70:	f04f 34ff 	mov.w	r4, #4294967295
 8003f74:	4620      	mov	r0, r4
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	200004ac 	.word	0x200004ac

08003f7c <_malloc_r>:
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	1ccd      	adds	r5, r1, #3
 8003f82:	f025 0503 	bic.w	r5, r5, #3
 8003f86:	3508      	adds	r5, #8
 8003f88:	2d0c      	cmp	r5, #12
 8003f8a:	bf38      	it	cc
 8003f8c:	250c      	movcc	r5, #12
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	4607      	mov	r7, r0
 8003f92:	db01      	blt.n	8003f98 <_malloc_r+0x1c>
 8003f94:	42a9      	cmp	r1, r5
 8003f96:	d905      	bls.n	8003fa4 <_malloc_r+0x28>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	4e2e      	ldr	r6, [pc, #184]	; (8004060 <_malloc_r+0xe4>)
 8003fa6:	f000 f89d 	bl	80040e4 <__malloc_lock>
 8003faa:	6833      	ldr	r3, [r6, #0]
 8003fac:	461c      	mov	r4, r3
 8003fae:	bb34      	cbnz	r4, 8003ffe <_malloc_r+0x82>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f7ff ffc2 	bl	8003f3c <sbrk_aligned>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	4604      	mov	r4, r0
 8003fbc:	d14d      	bne.n	800405a <_malloc_r+0xde>
 8003fbe:	6834      	ldr	r4, [r6, #0]
 8003fc0:	4626      	mov	r6, r4
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	d140      	bne.n	8004048 <_malloc_r+0xcc>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4638      	mov	r0, r7
 8003fcc:	eb04 0803 	add.w	r8, r4, r3
 8003fd0:	f000 f878 	bl	80040c4 <_sbrk_r>
 8003fd4:	4580      	cmp	r8, r0
 8003fd6:	d13a      	bne.n	800404e <_malloc_r+0xd2>
 8003fd8:	6821      	ldr	r1, [r4, #0]
 8003fda:	3503      	adds	r5, #3
 8003fdc:	1a6d      	subs	r5, r5, r1
 8003fde:	f025 0503 	bic.w	r5, r5, #3
 8003fe2:	3508      	adds	r5, #8
 8003fe4:	2d0c      	cmp	r5, #12
 8003fe6:	bf38      	it	cc
 8003fe8:	250c      	movcc	r5, #12
 8003fea:	4629      	mov	r1, r5
 8003fec:	4638      	mov	r0, r7
 8003fee:	f7ff ffa5 	bl	8003f3c <sbrk_aligned>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d02b      	beq.n	800404e <_malloc_r+0xd2>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	442b      	add	r3, r5
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	e00e      	b.n	800401c <_malloc_r+0xa0>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	1b52      	subs	r2, r2, r5
 8004002:	d41e      	bmi.n	8004042 <_malloc_r+0xc6>
 8004004:	2a0b      	cmp	r2, #11
 8004006:	d916      	bls.n	8004036 <_malloc_r+0xba>
 8004008:	1961      	adds	r1, r4, r5
 800400a:	42a3      	cmp	r3, r4
 800400c:	6025      	str	r5, [r4, #0]
 800400e:	bf18      	it	ne
 8004010:	6059      	strne	r1, [r3, #4]
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	bf08      	it	eq
 8004016:	6031      	streq	r1, [r6, #0]
 8004018:	5162      	str	r2, [r4, r5]
 800401a:	604b      	str	r3, [r1, #4]
 800401c:	4638      	mov	r0, r7
 800401e:	f104 060b 	add.w	r6, r4, #11
 8004022:	f000 f865 	bl	80040f0 <__malloc_unlock>
 8004026:	f026 0607 	bic.w	r6, r6, #7
 800402a:	1d23      	adds	r3, r4, #4
 800402c:	1af2      	subs	r2, r6, r3
 800402e:	d0b6      	beq.n	8003f9e <_malloc_r+0x22>
 8004030:	1b9b      	subs	r3, r3, r6
 8004032:	50a3      	str	r3, [r4, r2]
 8004034:	e7b3      	b.n	8003f9e <_malloc_r+0x22>
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	bf0c      	ite	eq
 800403c:	6032      	streq	r2, [r6, #0]
 800403e:	605a      	strne	r2, [r3, #4]
 8004040:	e7ec      	b.n	800401c <_malloc_r+0xa0>
 8004042:	4623      	mov	r3, r4
 8004044:	6864      	ldr	r4, [r4, #4]
 8004046:	e7b2      	b.n	8003fae <_malloc_r+0x32>
 8004048:	4634      	mov	r4, r6
 800404a:	6876      	ldr	r6, [r6, #4]
 800404c:	e7b9      	b.n	8003fc2 <_malloc_r+0x46>
 800404e:	230c      	movs	r3, #12
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4638      	mov	r0, r7
 8004054:	f000 f84c 	bl	80040f0 <__malloc_unlock>
 8004058:	e7a1      	b.n	8003f9e <_malloc_r+0x22>
 800405a:	6025      	str	r5, [r4, #0]
 800405c:	e7de      	b.n	800401c <_malloc_r+0xa0>
 800405e:	bf00      	nop
 8004060:	200004a8 	.word	0x200004a8

08004064 <_realloc_r>:
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4680      	mov	r8, r0
 800406a:	4614      	mov	r4, r2
 800406c:	460e      	mov	r6, r1
 800406e:	b921      	cbnz	r1, 800407a <_realloc_r+0x16>
 8004070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	4611      	mov	r1, r2
 8004076:	f7ff bf81 	b.w	8003f7c <_malloc_r>
 800407a:	b92a      	cbnz	r2, 8004088 <_realloc_r+0x24>
 800407c:	f7ff ff12 	bl	8003ea4 <_free_r>
 8004080:	4625      	mov	r5, r4
 8004082:	4628      	mov	r0, r5
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	f000 f838 	bl	80040fc <_malloc_usable_size_r>
 800408c:	4284      	cmp	r4, r0
 800408e:	4607      	mov	r7, r0
 8004090:	d802      	bhi.n	8004098 <_realloc_r+0x34>
 8004092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004096:	d812      	bhi.n	80040be <_realloc_r+0x5a>
 8004098:	4621      	mov	r1, r4
 800409a:	4640      	mov	r0, r8
 800409c:	f7ff ff6e 	bl	8003f7c <_malloc_r>
 80040a0:	4605      	mov	r5, r0
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0ed      	beq.n	8004082 <_realloc_r+0x1e>
 80040a6:	42bc      	cmp	r4, r7
 80040a8:	4622      	mov	r2, r4
 80040aa:	4631      	mov	r1, r6
 80040ac:	bf28      	it	cs
 80040ae:	463a      	movcs	r2, r7
 80040b0:	f7ff fed0 	bl	8003e54 <memcpy>
 80040b4:	4631      	mov	r1, r6
 80040b6:	4640      	mov	r0, r8
 80040b8:	f7ff fef4 	bl	8003ea4 <_free_r>
 80040bc:	e7e1      	b.n	8004082 <_realloc_r+0x1e>
 80040be:	4635      	mov	r5, r6
 80040c0:	e7df      	b.n	8004082 <_realloc_r+0x1e>
	...

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4d06      	ldr	r5, [pc, #24]	; (80040e0 <_sbrk_r+0x1c>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f7fc fee8 	bl	8000ea4 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200004b0 	.word	0x200004b0

080040e4 <__malloc_lock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <__malloc_lock+0x8>)
 80040e6:	f000 b811 	b.w	800410c <__retarget_lock_acquire_recursive>
 80040ea:	bf00      	nop
 80040ec:	200004b4 	.word	0x200004b4

080040f0 <__malloc_unlock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <__malloc_unlock+0x8>)
 80040f2:	f000 b80c 	b.w	800410e <__retarget_lock_release_recursive>
 80040f6:	bf00      	nop
 80040f8:	200004b4 	.word	0x200004b4

080040fc <_malloc_usable_size_r>:
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f18      	subs	r0, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfbc      	itt	lt
 8004106:	580b      	ldrlt	r3, [r1, r0]
 8004108:	18c0      	addlt	r0, r0, r3
 800410a:	4770      	bx	lr

0800410c <__retarget_lock_acquire_recursive>:
 800410c:	4770      	bx	lr

0800410e <__retarget_lock_release_recursive>:
 800410e:	4770      	bx	lr

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
